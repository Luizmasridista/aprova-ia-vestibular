import { useEffect, useState } from 'react';
import { useNavigate, useSearchParams } from 'react-router-dom';
import { supabase, checkSession, refreshSession } from '@/integrations/supabase/client';
import { Loader2 } from 'lucide-react';
import { toast } from 'sonner';
import { APP_URLS } from '@/lib/constants/urls';

// Fun√ß√£o para atualizar o perfil do usu√°rio ap√≥s confirma√ß√£o de email
async function updateUserProfile(user: any) {
  try {
    console.log('üîÑ Atualizando perfil do usu√°rio...');
    
    // Verifica se o usu√°rio j√° tem um registro na tabela users
    const { data: userData, error: userError } = await supabase
      .from('users')
      .select('id')
      .eq('id', user.id)
      .single();

    if (userError && userError.code !== 'PGRST116') { // PGRST116 = no rows returned
      console.error('‚ùå Erro ao verificar usu√°rio:', userError);
      return;
    }

    // Se n√£o tem registro, cria um novo
    if (!userData) {
      console.log('‚ûï Criando novo registro para o usu√°rio...');
      const userData = {
        id: user.id,
        email: user.email,
        full_name: user.user_metadata?.full_name || user.email?.split('@')[0],
        password_hash: user.encrypted_password || '',
        role: 'user',
        avatar_url: user.user_metadata?.avatar_url || null,
        created_at: new Date().toISOString(),
        updated_at: new Date().toISOString(),
        // Adicione outros campos obrigat√≥rios do seu esquema aqui
        email_confirmed_at: user.email_confirmed_at || new Date().toISOString(),
        last_sign_in_at: new Date().toISOString()
      };
      
      const { error: createError } = await supabase
        .from('users')
        .insert(userData);

      if (createError) throw createError;
      console.log('‚úÖ Registro de usu√°rio criado com sucesso');
    }

    // Atualiza o email_verified se necess√°rio
    if (user.email && !user.email_confirmed_at) {
      console.log('‚úÖ Marcando email como verificado');
      const { error: updateError } = await supabase.auth.updateUser({
        email: user.email,
        data: { email_verified: true }
      });

      if (updateError) throw updateError;
    }
  } catch (error) {
    console.error('‚ùå Erro ao atualizar perfil do usu√°rio:', error);
    // N√£o interrompe o fluxo em caso de erro na atualiza√ß√£o do perfil
  }
}

export default function AuthCallback() {
  const [searchParams] = useSearchParams();
  const [error, setError] = useState('');
  const [loading, setLoading] = useState(true);
  const navigate = useNavigate();

  useEffect(() => {
    const processAuth = async () => {
      try {
        setLoading(true);
        console.log('üîÑ Processando callback de autentica√ß√£o...');
        
        // Verifica se h√° um hash fragment (usado pelo Supabase)
        const hashParams = new URLSearchParams(window.location.hash.substring(1));
        const accessToken = hashParams.get('access_token') || searchParams.get('access_token');
        const refreshToken = hashParams.get('refresh_token') || searchParams.get('refresh_token');
        const type = hashParams.get('type') || searchParams.get('type') || 'login';
        const error_code = hashParams.get('error_code') || searchParams.get('error_code');
        const error_description = hashParams.get('error_description') || searchParams.get('error_description');
        const returnTo = searchParams.get('returnTo') || sessionStorage.getItem('returnTo') || '/dashboard';

        // Log para depura√ß√£o
        console.log('üîç Dados da URL:', {
          hash: window.location.hash,
          search: window.location.search,
          accessToken: accessToken ? '***' : 'n√£o encontrado',
          refreshToken: refreshToken ? '***' : 'n√£o encontrado',
          type,
          error_code,
          returnTo
        });

        // Limpa o hash da URL para evitar problemas de navega√ß√£o
        if (window.location.hash) {
          window.history.replaceState({}, document.title, window.location.pathname + window.location.search);
        }

        console.log('üîç Par√¢metros de autentica√ß√£o:', { 
          hasAccessToken: !!accessToken, 
          hasRefreshToken: !!refreshToken,
          type,
          error_code,
          returnTo
        });

        // Verifica se h√° erro na URL
        if (error_code) {
          console.error('‚ùå Erro na autentica√ß√£o:', { error_code, error_description });
          throw new Error(error_description || `Erro na autentica√ß√£o (${error_code})`);
        }

        // Verifica se h√° tokens, tenta verificar a sess√£o atual
        if (!accessToken || !refreshToken) {
          console.log('‚ÑπÔ∏è Nenhum token encontrado na URL, verificando sess√£o existente...');
          
          const { session: existingSession, error: sessionError } = await checkSession();
          
          if (sessionError) {
            console.error('‚ùå Erro ao verificar sess√£o:', sessionError);
            
            // Tenta atualizar a sess√£o antes de desistir
            const { session: refreshedSession, error: refreshError } = await refreshSession();
            
            if (refreshError || !refreshedSession) {
              console.error('‚ùå Falha ao atualizar a sess√£o:', refreshError);
              throw new Error('Sua sess√£o expirou. Por favor, fa√ßa login novamente.');
            }
            
            // Se chegou aqui, a sess√£o foi atualizada com sucesso
            console.log('‚úÖ Sess√£o atualizada com sucesso para usu√°rio:', refreshedSession.user?.email);
            toast.success('Sess√£o restaurada com sucesso!');
            sessionStorage.removeItem('returnTo');
            navigate(returnTo, { replace: true });
            return;
          }
          
          if (existingSession) {
            console.log('‚úÖ Sess√£o j√° ativa para usu√°rio:', existingSession.user?.email);
            // J√° h√° uma sess√£o ativa, redireciona para a p√°gina apropriada
            toast.success('Sess√£o j√° ativa!');
            sessionStorage.removeItem('returnTo');
            navigate(returnTo, { replace: true });
            return;
          } else {
            console.warn('‚ö†Ô∏è Nenhuma sess√£o ativa encontrada');
            throw new Error('Nenhuma sess√£o ativa encontrada. Por favor, fa√ßa login novamente.');
          }
        }

        console.log('üîë Configurando sess√£o com tokens fornecidos...');
        
        // Configura a sess√£o com os tokens fornecidos
        let session;
        let sessionSetupError: Error | null = null;
        
        try {
          const { data: sessionData, error: sessionError } = await supabase.auth.setSession({
            access_token: accessToken,
            refresh_token: refreshToken,
          });
          
          if (sessionError) {
            sessionSetupError = sessionError;
            throw sessionError;
          }
          
          // Atribui a sess√£o para a vari√°vel mut√°vel
          session = sessionData?.session;
          
          if (!session) {
            // Tenta atualizar a sess√£o se n√£o estiver dispon√≠vel
            const { session: refreshedSession, error: refreshError } = await refreshSession();
            
            if (refreshError || !refreshedSession) {
              sessionSetupError = refreshError || new Error('Falha ao atualizar a sess√£o');
              throw sessionSetupError;
            }
            
            session = refreshedSession;
          }
        } catch (error) {
          console.error('‚ùå Erro ao configurar a sess√£o:', error);
          
          // Tenta uma √∫ltima vez com o refresh token
          try {
            const { session: refreshedSession, error: refreshError } = await refreshSession();
            if (refreshError || !refreshedSession) {
              sessionSetupError = refreshError || new Error('Falha ao atualizar a sess√£o');
              throw sessionSetupError;
            }
            session = refreshedSession;
            sessionSetupError = null; // Reset error if recovery succeeds
          } catch (refreshError) {
            console.error('‚ùå Falha cr√≠tica ao atualizar a sess√£o:', refreshError);
            sessionSetupError = refreshError as Error;
            throw new Error('N√£o foi poss√≠vel autenticar sua sess√£o. Por favor, fa√ßa login novamente.');
          }
        }

        // Handle any session setup errors that occurred
        if (sessionSetupError) {
          console.error('‚ùå Erro ao configurar sess√£o:', sessionSetupError);
          
          // Verifica se o erro √© relacionado a email n√£o confirmado
          const errorMessage = sessionSetupError.message || '';
          if (errorMessage.includes('Email not confirmed')) {
            // For√ßa a confirma√ß√£o do email
            console.log('üîÑ Tentando for√ßar confirma√ß√£o de email...');
            const { data: { user }, error: userError } = await supabase.auth.getUser(accessToken);
            
            if (userError) {
              console.error('‚ùå Erro ao obter dados do usu√°rio:', userError);
              throw new Error('Falha ao verificar o status da confirma√ß√£o de email.');
            }
            
            // Atualiza o usu√°rio para marcar o email como confirmado
            const { error: updateError } = await supabase.auth.updateUser({
              data: { email_confirmed_at: new Date().toISOString() }
            });
            
            if (updateError) {
              console.error('‚ùå Erro ao atualizar status de confirma√ß√£o:', updateError);
              throw new Error('N√£o foi poss√≠vel confirmar seu email. Por favor, tente novamente.');
            }
            
            // Tenta configurar a sess√£o novamente
            const { data: { session: newSession }, error: retryError } = await supabase.auth.setSession({
              access_token: accessToken,
              refresh_token: refreshToken,
            });
            
            if (retryError || !newSession) {
              throw new Error('N√£o foi poss√≠vel criar a sess√£o ap√≥s a confirma√ß√£o do email.');
            }
            
            // Atualiza a sess√£o com os novos dados
            session = newSession;
            console.log('‚úÖ Email confirmado com sucesso!');
          } else if (sessionSetupError) {
            throw sessionSetupError;
          } else {
            throw new Error('Erro desconhecido ao configurar a sess√£o');
          }
        }
        
        if (!session) {
          const errorMsg = 'N√£o foi poss√≠vel criar a sess√£o: nenhum dado de sess√£o retornado';
          console.error('‚ùå', errorMsg);
          throw new Error(errorMsg);
        }

        console.log('‚úÖ Sess√£o configurada para usu√°rio:', session.user?.email);
        console.log('üìã Dados da sess√£o:', {
          isAuthenticated: !!session.user,
          email: session.user?.email,
          expiresAt: session.expires_at,
          expiresIn: session.expires_in,
          refreshToken: session.refresh_token ? '***' : 'n√£o fornecido'
        });

        // Aguarda um pouco para garantir que a sess√£o foi estabelecida
        console.log('‚è≥ Aguardando estabiliza√ß√£o da sess√£o...');
        await new Promise(resolve => setTimeout(resolve, 500));

        // Verifica novamente a sess√£o ap√≥s a espera
        const { data: { session: verifiedSession }, error: sessionError } = await supabase.auth.getSession();
        
        console.log('üîç Verifica√ß√£o de sess√£o:', {
          hasSession: !!verifiedSession,
          userEmail: verifiedSession?.user?.email,
          error: sessionError
        });
        
        if (!verifiedSession) {
          // Tenta obter o usu√°rio diretamente
          const { data: { user }, error: userError } = await supabase.auth.getUser();
          
          console.log('üîç Tentativa de obter usu√°rio diretamente:', {
            user: user ? 'Encontrado' : 'N√£o encontrado',
            error: userError
          });
          
          if (userError || !user) {
            const errorMsg = 'A sess√£o n√£o p√¥de ser verificada ap√≥s a configura√ß√£o';
            console.error('‚ùå', errorMsg, { sessionError, userError });
            
            // Tenta fazer logout para limpar qualquer estado inv√°lido
            await supabase.auth.signOut();
            
            throw new Error('N√£o foi poss√≠vel autenticar sua sess√£o. Por favor, tente fazer login novamente.');
          }
          
          // Se chegou aqui, temos um usu√°rio mas n√£o uma sess√£o v√°lida
          // Vamos tentar for√ßar uma nova sess√£o
          const { data: { session: newSession }, error: refreshError } = await supabase.auth.refreshSession();
          
          if (refreshError || !newSession) {
            console.error('‚ùå Falha ao atualizar a sess√£o:', refreshError);
            throw new Error('Sess√£o expirada. Por favor, fa√ßa login novamente.');
          }
          
          // Atualiza a sess√£o verificada
          Object.assign(verifiedSession, newSession);
        }

        console.log('üîÑ Redirecionando com base no tipo de autentica√ß√£o:', type);

        // Verifica se o usu√°rio est√° autenticado antes de prosseguir
        if (!verifiedSession?.user) {
          console.error('‚ùå Usu√°rio n√£o autenticado ap√≥s o processo de login');
          throw new Error('Falha ao autenticar o usu√°rio. Por favor, tente novamente.');
        }

        // Atualiza o perfil do usu√°rio se necess√°rio
        try {
          await updateUserProfile(verifiedSession.user);
          console.log('‚úÖ Perfil do usu√°rio atualizado com sucesso');
        } catch (profileError) {
          console.warn('‚ö†Ô∏è Aviso ao atualizar perfil do usu√°rio:', profileError);
          // N√£o interrompe o fluxo em caso de erro na atualiza√ß√£o do perfil
        }

        // Redireciona com base no tipo de autentica√ß√£o
        console.log('üîÑ Redirecionando para:', returnTo);
        switch (type) {
          case 'signup':
            console.log('üéâ Novo cadastro confirmado para:', verifiedSession.user?.email);
            toast.success('Email confirmado com sucesso! Bem-vindo ao APROVA.AE!');
            // Atualiza o perfil do usu√°rio se necess√°rio
            await updateUserProfile(verifiedSession.user);
            navigate(returnTo, { replace: true });
            return;
            
          case 'recovery':
            console.log('üîë Recupera√ß√£o de senha para:', verifiedSession.user?.email);
            toast.success('Email verificado. Agora voc√™ pode redefinir sua senha.');
            navigate('/reset-password', { 
              replace: true,
              state: { email: verifiedSession.user?.email }
            });
            return;
            
          case 'email_change':
            console.log('‚úâÔ∏è Email alterado para:', verifiedSession.user?.new_email);
            toast.success('Email alterado com sucesso!');
            sessionStorage.removeItem('returnTo');
            navigate('/perfil', { replace: true });
            return;
            
          case 'magiclink':
            console.log('üîë Login via magic link para:', verifiedSession.user?.email);
            toast.success('Login realizado com sucesso!');
            sessionStorage.removeItem('returnTo');
            navigate(returnTo, { replace: true });
            return;
            
          default:
            console.log('üîë Login bem-sucedido para:', verifiedSession.user?.email);
            toast.success('Autentica√ß√£o realizada com sucesso!');
            sessionStorage.removeItem('returnTo');
            navigate(returnTo, { replace: true });
            return;
        }
        
      } catch (err) {
        console.error('Erro no callback de autentica√ß√£o:', err);
        const errorMessage = err instanceof Error ? err.message : 'Erro desconhecido';
        setError(`Ocorreu um erro ao processar sua autentica√ß√£o: ${errorMessage}`);
        toast.error('N√£o foi poss√≠vel completar a autentica√ß√£o');
        setLoading(false);
      }
    };

    processAuth();
  }, [navigate, searchParams]);

  // Se estiver carregando, mostra o indicador de carregamento
  if (loading) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
        <div className="w-full max-w-md space-y-8">
          <div className="text-center">
            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
              Processando autentica√ß√£o...
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              Por favor, aguarde enquanto processamos sua solicita√ß√£o.
            </p>
          </div>
          <div className="flex justify-center">
            <Loader2 className="h-12 w-12 animate-spin text-blue-600" />
          </div>
          <p className="mt-4 text-center text-sm text-gray-600">
            Isso pode levar alguns instantes...
          </p>
        </div>
      </div>
    );
  }

  // Se houver erro, mostra a mensagem de erro
  if (error) {
    return (
      <div className="flex min-h-screen flex-col items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
        <div className="w-full max-w-md space-y-8">
          <div className="text-center">
            <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
              Ocorreu um erro
            </h2>
            <p className="mt-2 text-sm text-gray-600">
              {error || 'N√£o foi poss√≠vel completar a autentica√ß√£o. Por favor, tente novamente.'}
            </p>
          </div>
          
          <div className="mt-6 space-y-4">
            <button
              onClick={() => navigate(APP_URLS.LOGIN)}
              className="group relative flex w-full justify-center rounded-md border border-transparent bg-blue-600 px-4 py-2 text-sm font-medium text-white hover:bg-blue-700 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Voltar para o login
            </button>
            
            <button
              onClick={() => window.location.reload()}
              className="group relative flex w-full justify-center rounded-md border border-gray-300 bg-white px-4 py-2 text-sm font-medium text-gray-700 hover:bg-gray-50 focus:outline-none focus:ring-2 focus:ring-blue-500 focus:ring-offset-2"
            >
              Tentar novamente
            </button>
          </div>
          
          <div className="mt-6 border-t border-gray-200 pt-6">
            <p className="text-center text-sm text-gray-600">
              Ainda com problemas?{' '}
              <a
                href={`mailto:suporte@aprova.ae?subject=Problema%20com%20a%20autentica√ß√£o&body=Descreva%20o%20problema%20que%20est√°%20encontrando:%0D%0A%0D%0ADetalhes%20t√©cnicos:%0D%0A- Navegador: ${window.navigator.userAgent}%0D%0A- URL: ${window.location.href}%0D%0A- Hora: ${new Date().toISOString()}`}
                className="font-medium text-blue-600 hover:text-blue-500"
              >
                Entre em contato com o suporte
              </a>
            </p>
          </div>
        </div>
      </div>
    );
  }

  // Estado de sucesso (n√£o deve ser alcan√ßado, pois redirecionamos antes)
  return (
    <div className="flex min-h-screen flex-col items-center justify-center bg-gray-50 px-4 py-12 sm:px-6 lg:px-8">
      <div className="w-full max-w-md space-y-8">
        <div className="text-center">
          <h2 className="mt-6 text-3xl font-extrabold text-gray-900">
            Autentica√ß√£o conclu√≠da!
          </h2>
          <p className="mt-2 text-sm text-gray-600">
            Voc√™ ser√° redirecionado em instantes...
          </p>
        </div>
        <div className="flex justify-center">
          <div className="h-12 w-12 animate-spin rounded-full border-b-2 border-blue-600"></div>
        </div>
          <>
            <div className="mx-auto flex h-12 w-12 items-center justify-center rounded-full bg-green-100">
              <svg
                className="h-6 w-6 text-green-600"
                fill="none"
                viewBox="0 0 24 24"
                stroke="currentColor"
              >
                <path
                  strokeLinecap="round"
                  strokeLinejoin="round"
                  strokeWidth={2}
                  d="M5 13l4 4L19 7"
                />
              </svg>
            </div>
            <h2 className="mt-3 text-2xl font-bold text-gray-900">Sucesso!</h2>
            <p className="mt-2 text-gray-600">Redirecionando...</p>
          </>
      </div>
    </div>
  );
}
